[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "private-assistant-scene-skill"
version = "2.0.1"
description = "Scene Control Skill for Private Assistant: Enables automated and voice-activated scene control within smart home environments."
authors = [
    { name = "stkr22", email = "stkr22@github.com" }
]
readme = "README.md"
license = { text = "GNU General Public License v3.0" }

keywords = []
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Programming Language :: Python",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Topic :: Home Automation",
]

requires-python = ">=3.11,<3.13"
dependencies = [
    "pydantic~=2.9.2",
    "jinja2~=3.1.3",
    "private-assistant-commons~=3.0.0",
    "typer~=0.15.1",
    "asyncpg~=0.30.0",
    "sqlmodel~=0.0.22",
]

[dependency-groups]
dev = [
    "ruff~=0.8.0",
    "mypy~=1.17.0",
    "pytest~=8.3.3",
    "types-pyyaml~=6.0.12.20240311",
    "pytest-cov~=6.0.0",
    "pytest-asyncio~=0.25.1",
    "aiosqlite~=0.21.0",
]

[project.scripts]
private-assistant-scene-skill = "private_assistant_scene_skill.main:app"

[tool.ruff]
target-version = "py312"
line-length = 120
indent-width = 4

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "I",    # isort
    "UP",   # pyupgrade
    "N",    # pep8-naming
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
]
ignore = ["E203"]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-ra -q"
asyncio_mode = "auto"
markers = [
    "asyncio: mark a test as an async test",
]

[tool.coverage.run]
source = ["private_assistant_scene_skill"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
]
